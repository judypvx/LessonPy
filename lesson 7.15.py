# Задание 7. Метод бутерброда
# В секретном агентстве Super-Secret-no решили использовать «метод бутерброда» для шифрования переписки своих сотрудников.
# Сначала буквы слова нумеруются в таком порядке:
# первая буква получает номер 1, последняя буква — номер 2, вторая — номер 3, предпоследняя — номер 4, потом третья… и так для всех букв (см. рисунок).
# Затем все буквы записываются в шифр в порядке своих номеров.
#
# Например, слово sandwich зашифруется в shacnidw.
# Программист Super-Secret-no написал программу шифрования и уволился. Теперь агенты не могут понять, что они написали друг другу.
# Что нужно сделать
# Напишите программу-дешифратор, которая расшифровала бы введённые сообщения.
# Пример:
# Введите зашифрованное сообщение: shacnidw.
# Расшифрованное сообщение: sandwich.
# Что оценивается
# Задание считается успешно выполненным, если:
# ⦁	результат вывода соответствует условию;
# ⦁	input содержит корректное приглашение для ввода;
# ⦁	вывод содержит описание результата (выведенные числа сопровождаются текстовым описанием);
# ⦁	переменные имеют значащие имена, не только a, b, c, d (видео 2.3).
# ⦁	как и в сложении чисел - в сложении строк можно менять слагаемыми местами. только в отличии от чисел - такая перемена изменит результат:
# строка += “а” – так вы добавите символ в конец строки
# строка = “а” + строка – так вы добавите символ в начало строки (что позволит сложить строку задом наперед)


encrypted_message = input("Введите зашифрованное сообщение: ")
n = len(encrypted_message)
decrypted_message = [''] * n

for i in range(n):
    if i % 2 == 0:
        decrypted_message[(i // 2)] = encrypted_message[i]
    else:
        decrypted_message[n - (i // 2) - 1] = encrypted_message[i]

decrypted_message_str = ''
for char in decrypted_message:
    decrypted_message_str += char

print("Расшифрованное сообщение:", decrypted_message_str)